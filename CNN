{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOCMmzdoaSNMG1IOdCKOSwr",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/yubisushi/-/blob/main/Untitled35.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**기존 모델**"
      ],
      "metadata": {
        "id": "Ru_bE2jgtRO0"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 782
        },
        "id": "44caJgb9p9n8",
        "outputId": "b8df1e09-154c-490d-a2b3-4ce8f781c7de"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[기본] Epoch 0: Train Loss=2.5663, Acc=0.1400, Test Loss=2.6630, Acc=0.0200\n",
            "[기본] Epoch 250: Train Loss=0.6775, Acc=0.8400, Test Loss=0.5695, Acc=0.8400\n",
            "[기본] Epoch 500: Train Loss=0.4638, Acc=0.8800, Test Loss=0.2042, Acc=0.9600\n",
            "[기본] Epoch 750: Train Loss=0.2078, Acc=0.9400, Test Loss=0.1090, Acc=0.9800\n",
            "[기본] Epoch 1000: Train Loss=0.3935, Acc=0.9000, Test Loss=0.0944, Acc=0.9800\n",
            "[기본] Epoch 1250: Train Loss=0.1511, Acc=0.9600, Test Loss=0.0375, Acc=1.0000\n",
            "[기본] Epoch 1500: Train Loss=0.1457, Acc=0.9400, Test Loss=0.0890, Acc=0.9600\n",
            "[기본] Epoch 1750: Train Loss=0.0730, Acc=0.9800, Test Loss=0.2483, Acc=0.9400\n",
            "[기본] Epoch 2000: Train Loss=0.0373, Acc=1.0000, Test Loss=0.0939, Acc=0.9800\n",
            "[기본] Epoch 2250: Train Loss=0.1160, Acc=0.9600, Test Loss=0.0237, Acc=1.0000\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 44592 (\\N{HANGUL SYLLABLE GI}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 48376 (\\N{HANGUL SYLLABLE BON}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 47784 (\\N{HANGUL SYLLABLE MO}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 45944 (\\N{HANGUL SYLLABLE DEL}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import tensorflow.compat.v1 as tf\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "tf.disable_v2_behavior()\n",
        "\n",
        "from tensorflow.keras.datasets import mnist\n",
        "(train_x, train_y), (test_x, test_y) = mnist.load_data()\n",
        "train_x, test_x = train_x / 255.0, test_x / 255.0\n",
        "train_x = train_x.reshape(-1, 28, 28, 1)\n",
        "test_x = test_x.reshape(-1, 28, 28, 1)\n",
        "\n",
        "input_h, input_w, input_ch = 28, 28, 1\n",
        "n_hidden = 100\n",
        "n_output = 10\n",
        "conv_result_size = 7 * 7 * 64\n",
        "\n",
        "# Weights\n",
        "weights = {\n",
        "    'conv1': tf.Variable(tf.random.normal([3, 3, 1, 32], stddev=0.1)),\n",
        "    'conv2': tf.Variable(tf.random.normal([3, 3, 32, 64], stddev=0.1)),\n",
        "    'hidden': tf.Variable(tf.random.normal([conv_result_size, n_hidden], stddev=0.1)),\n",
        "    'output': tf.Variable(tf.random.normal([n_hidden, n_output], stddev=0.1))\n",
        "}\n",
        "\n",
        "biases = {\n",
        "    'conv1': tf.Variable(tf.random.normal([32], stddev=0.1)),\n",
        "    'conv2': tf.Variable(tf.random.normal([64], stddev=0.1)),\n",
        "    'hidden': tf.Variable(tf.random.normal([n_hidden], stddev=0.1)),\n",
        "    'output': tf.Variable(tf.random.normal([n_output], stddev=0.1))\n",
        "}\n",
        "\n",
        "x = tf.placeholder(tf.float32, [None, 28, 28, 1])\n",
        "y = tf.placeholder(tf.float32, [None, n_output])\n",
        "\n",
        "def net(x, weights, biases):\n",
        "    conv1 = tf.nn.relu(tf.nn.conv2d(x, weights['conv1'], [1,1,1,1], 'SAME') + biases['conv1'])\n",
        "    pool1 = tf.nn.max_pool(conv1, [1,2,2,1], [1,2,2,1], 'SAME')\n",
        "\n",
        "    conv2 = tf.nn.relu(tf.nn.conv2d(pool1, weights['conv2'], [1,1,1,1], 'SAME') + biases['conv2'])\n",
        "    pool2 = tf.nn.max_pool(conv2, [1,2,2,1], [1,2,2,1], 'SAME')\n",
        "\n",
        "    flat = tf.reshape(pool2, [-1, conv_result_size])\n",
        "    hidden = tf.nn.relu(tf.matmul(flat, weights['hidden']) + biases['hidden'])\n",
        "    output = tf.matmul(hidden, weights['output']) + biases['output']\n",
        "    return output\n",
        "\n",
        "pred = net(x, weights, biases)\n",
        "loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=pred, labels=y))\n",
        "optm = tf.train.AdamOptimizer(0.0001).minimize(loss)\n",
        "correct = tf.equal(tf.argmax(pred, 1), tf.argmax(y, 1))\n",
        "accuracy = tf.reduce_mean(tf.cast(correct, tf.float32))\n",
        "\n",
        "sess = tf.Session()\n",
        "sess.run(tf.global_variables_initializer())\n",
        "\n",
        "train_loss, test_loss = [], []\n",
        "for epoch in range(2500):\n",
        "    idx = np.random.choice(train_x.shape[0], 50)\n",
        "    batch_x = train_x[idx]\n",
        "    batch_y = tf.keras.utils.to_categorical(train_y[idx], 10)\n",
        "    sess.run(optm, feed_dict={x: batch_x, y: batch_y})\n",
        "\n",
        "    if epoch % 250 == 0:\n",
        "        t_idx = np.random.choice(test_x.shape[0], 50)\n",
        "        test_x_batch = test_x[t_idx]\n",
        "        test_y_batch = tf.keras.utils.to_categorical(test_y[t_idx], 10)\n",
        "        l1, a1 = sess.run([loss, accuracy], feed_dict={x: batch_x, y: batch_y})\n",
        "        l2, a2 = sess.run([loss, accuracy], feed_dict={x: test_x_batch, y: test_y_batch})\n",
        "        train_loss.append(l1)\n",
        "        test_loss.append(l2)\n",
        "        print(f\"[기본] Epoch {epoch}: Train Loss={l1:.4f}, Acc={a1:.4f}, Test Loss={l2:.4f}, Acc={a2:.4f}\")\n",
        "\n",
        "plt.plot(train_loss, 'r-', label='Train Loss')\n",
        "plt.plot(test_loss, 'b-', label='Test Loss')\n",
        "plt.title('basic_model_Loss')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**레이어 추가 모델**"
      ],
      "metadata": {
        "id": "diVdvD31tYyO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "n_fc1, n_fc2 = 625, 100\n",
        "conv_result_size = 4 * 4 * 128\n",
        "\n",
        "weights = {\n",
        "    'conv1': tf.Variable(tf.random.normal([3, 3, 1, 32], stddev=0.1)),\n",
        "    'conv2': tf.Variable(tf.random.normal([3, 3, 32, 64], stddev=0.1)),\n",
        "    'conv3': tf.Variable(tf.random.normal([3, 3, 64, 128], stddev=0.1)),\n",
        "    'fc1': tf.Variable(tf.random.normal([conv_result_size, n_fc1], stddev=0.1)),\n",
        "    'fc2': tf.Variable(tf.random.normal([n_fc1, n_fc2], stddev=0.1)),\n",
        "    'out': tf.Variable(tf.random.normal([n_fc2, n_output], stddev=0.1)),\n",
        "}\n",
        "\n",
        "biases = {\n",
        "    'conv1': tf.Variable(tf.random.normal([32], stddev=0.1)),\n",
        "    'conv2': tf.Variable(tf.random.normal([64], stddev=0.1)),\n",
        "    'conv3': tf.Variable(tf.random.normal([128], stddev=0.1)),\n",
        "    'fc1': tf.Variable(tf.random.normal([n_fc1], stddev=0.1)),\n",
        "    'fc2': tf.Variable(tf.random.normal([n_fc2], stddev=0.1)),\n",
        "    'out': tf.Variable(tf.random.normal([n_output], stddev=0.1)),\n",
        "}\n",
        "\n",
        "def net(x, weights, biases):\n",
        "    c1 = tf.nn.relu(tf.nn.conv2d(x, weights['conv1'], [1,1,1,1], 'SAME') + biases['conv1'])\n",
        "    p1 = tf.nn.max_pool(c1, [1,2,2,1], [1,2,2,1], 'SAME')\n",
        "\n",
        "    c2 = tf.nn.relu(tf.nn.conv2d(p1, weights['conv2'], [1,1,1,1], 'SAME') + biases['conv2'])\n",
        "    p2 = tf.nn.max_pool(c2, [1,2,2,1], [1,2,2,1], 'SAME')\n",
        "\n",
        "    c3 = tf.nn.relu(tf.nn.conv2d(p2, weights['conv3'], [1,1,1,1], 'SAME') + biases['conv3'])\n",
        "    p3 = tf.nn.max_pool(c3, [1,2,2,1], [1,2,2,1], 'SAME')\n",
        "\n",
        "    flat = tf.reshape(p3, [-1, conv_result_size])\n",
        "    fc1 = tf.nn.relu(tf.matmul(flat, weights['fc1']) + biases['fc1'])\n",
        "    fc2 = tf.nn.relu(tf.matmul(fc1, weights['fc2']) + biases['fc2'])\n",
        "    out = tf.matmul(fc2, weights['out']) + biases['out']\n",
        "    return out\n",
        "\n",
        "pred = net(x, weights, biases)\n",
        "loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=pred, labels=y))\n",
        "optm = tf.train.AdamOptimizer(0.0001).minimize(loss)\n",
        "correct = tf.equal(tf.argmax(pred, 1), tf.argmax(y, 1))\n",
        "accuracy = tf.reduce_mean(tf.cast(correct, tf.float32))\n",
        "\n",
        "sess = tf.Session()\n",
        "sess.run(tf.global_variables_initializer())\n",
        "\n",
        "train_loss, test_loss = [], []\n",
        "for epoch in range(2500):\n",
        "    idx = np.random.choice(train_x.shape[0], 50)\n",
        "    batch_x = train_x[idx]\n",
        "    batch_y = tf.keras.utils.to_categorical(train_y[idx], 10)\n",
        "    sess.run(optm, feed_dict={x: batch_x, y: batch_y})\n",
        "\n",
        "    if epoch % 250 == 0:\n",
        "        t_idx = np.random.choice(test_x.shape[0], 50)\n",
        "        test_x_batch = test_x[t_idx]\n",
        "        test_y_batch = tf.keras.utils.to_categorical(test_y[t_idx], 10)\n",
        "        l1, a1 = sess.run([loss, accuracy], feed_dict={x: batch_x, y: batch_y})\n",
        "        l2, a2 = sess.run([loss, accuracy], feed_dict={x: test_x_batch, y: test_y_batch})\n",
        "        train_loss.append(l1)\n",
        "        test_loss.append(l2)\n",
        "        print(f\"[추가] Epoch {epoch}: Train Loss={l1:.4f}, Acc={a1:.4f}, Test Loss={l2:.4f}, Acc={a2:.4f}\")\n",
        "\n",
        "plt.plot(train_loss, 'r-', label='Train Loss')\n",
        "plt.plot(test_loss, 'b-', label='Test Loss')\n",
        "plt.title('conv3 + FC2 추가 모델 Loss')\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 709
        },
        "id": "nphIMGUFtZEp",
        "outputId": "a590a0b2-0d66-4d29-e79e-dc455432679f"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[추가] Epoch 0: Train Loss=4.2046, Acc=0.1000, Test Loss=4.4187, Acc=0.1400\n",
            "[추가] Epoch 250: Train Loss=0.3504, Acc=0.8800, Test Loss=0.1540, Acc=0.9600\n",
            "[추가] Epoch 500: Train Loss=0.0802, Acc=1.0000, Test Loss=0.0362, Acc=1.0000\n",
            "[추가] Epoch 750: Train Loss=0.0654, Acc=0.9800, Test Loss=0.1033, Acc=0.9600\n",
            "[추가] Epoch 1000: Train Loss=0.0372, Acc=1.0000, Test Loss=0.1822, Acc=0.9600\n",
            "[추가] Epoch 1250: Train Loss=0.0393, Acc=1.0000, Test Loss=0.1165, Acc=0.9800\n",
            "[추가] Epoch 1500: Train Loss=0.1042, Acc=0.9800, Test Loss=0.0601, Acc=0.9800\n",
            "[추가] Epoch 1750: Train Loss=0.2155, Acc=0.9200, Test Loss=0.0120, Acc=1.0000\n",
            "[추가] Epoch 2000: Train Loss=0.0712, Acc=0.9400, Test Loss=0.0396, Acc=0.9800\n",
            "[추가] Epoch 2250: Train Loss=0.0176, Acc=1.0000, Test Loss=0.0449, Acc=0.9800\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 52628 (\\N{HANGUL SYLLABLE CU}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 44032 (\\N{HANGUL SYLLABLE GA}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}
